#pragma once
#include <array>
#include <vector>
#include "Sector.h"

struct SEND_OFFSETS
{
    static constexpr int getDirectionIndex(int dx, int dy) {
        // 3x3 방향 맵을 정의, 인덱스를 컴파일 타임에 계산할 수 있게 한다.
        constexpr int DIRECTION_MAP[3][3] = {
            //좌상단이 0이지만, 배열 구성을 위해 위 아래가 뒤집어진 상태.
            {6, 7, 8},  // -1, -1 -> 6  |  -1, 0 -> 7  |  -1, 1 -> 8
            {3, 4, 5},  //  0, -1 -> 3  |   0, 0 -> 4  |   0, 1 -> 5
            {0, 1, 2}   //  1, -1 -> 0  |   1, 0 -> 1  |   1, 1 -> 2
        };

        // dx와 dy가 -1, 0, 1의 범위 내에 있는지 체크 (허용되지 않는 값은 -1 리턴)
        if (dx < -1 || dx > 1 || dy < -1 || dy > 1) {
            return -1; // 올바르지 않은 방향
        }

        // 2차원 배열의 인덱스에 맞게 조정하여 인덱스 반환
        return DIRECTION_MAP[dx + 1][dy + 1];
    }

    //시계방향으로 넣는다.
    //xy 반대인거 고려함.
    static void Init()
    {
        CreateTable = {

            // 이동 방향: 좌상단(1, -1)
            {
                {-1, -1}
                , {0, -1}
                , {1, -1}
                , {1, 0}
                , {1, 1}
            }
            ,
            // 이동 방향: 상단(1, 0)
            {
                {1, -1}
                , {1, 0}
                , {1, 1}
            }
            ,
            // 이동 방향: 우상단(1, 1)
            {
                {1, -1}
                , {1, 0}
                , {1, 1}
                , {0, 1}
                , {-1, 1}
            }
            ,
            // 이동 방향: 좌(0, -1)
            {
                {-1, -1}
                , {0, -1}
                , {1, -1}
            }
            ,
            // 이동 방향: 정지(0, 0)
            {
                {0, 0} // 정지 상태에서는 아무 것도 삭제하지 않음
            }
            ,
            // 이동 방향: 우(0, 1)
            {
                {1, 1}
                , {0, 1}
                , {-1, 1}
            }
            ,
            // 이동 방향: 좌하단(-1, -1)
            {
                {-1, 1}
                , {-1, 0}
                , {-1, -1}
                , {0, -1}
                , {1, -1}
            }
            ,
            // 이동 방향: 하단(-1, 0)
            {
                {-1, 1}
                , {-1, 0}
                , {-1, -1}
            }
            ,
            // 이동 방향: 우하단(-1, 1)
            {
                {1, 1}
                , {0, 1}
                , {-1, 1}
                , {-1, 0}
                , {-1, -1}
            }

        };

        DeleteTable = {

            // 이동 방향: 좌상단(1, -1)
            {
                {1, 1}
                , {0, 1}
                , {-1, 1}
                , {-1, 0}
                , {-1, -1}
            }
            ,
            // 이동 방향: 상단(1, 0)
            {
                {-1, 1}
                , {-1, 0}
                , {-1, -1}
            }
            ,
            // 이동 방향: 우상단(1, 1)
            {
                {-1, 1}
                , {-1, 0}
                , {-1, -1}
                , {0, -1}
                , {1, -1}
            }
            ,
            // 이동 방향: 좌(0, -1)
            {
                {1, 1}
                , {0, 1}
                , {-1, 1}
            }
            ,
            // 이동 방향: 정지(0, 0)
            {
                // 정지 상태에서는 아무 것도 삭제하지 않음
            }
            ,
            // 이동 방향: 우(0, 1)
            {
                {-1, -1}
                , {0, -1}
                , {1, -1}
            }
            ,
            // 이동 방향: 좌하단(-1, -1)
            {
                {1, -1}
                , {1, 0}
                , {1, 1}
                , {0, 1}
                , {-1, 1}
            }
            ,
            // 이동 방향: 하단(-1, 0)
            {
                {1, -1}
                , {1, 0}
                , {1, 1}
            }
            ,
            // 이동 방향: 우하단(-1, 1)
            {
                {-1, -1}
                , {0, -1}
                , {1, -1}
                , {1, 0}
                , {1, 1}
            }

        };
    }

    inline static std::vector<std::vector<psh::Sector>> CreateTable;

    inline static std::vector<std::vector<psh::Sector>> DeleteTable;

    //X,Y
    static constexpr std::array<psh::Sector, 1> Single = {{{0, 0}}};
    static constexpr std::array<psh::Sector, 9> BROADCAST = {
        {
            {1, -1}
            , {1, 0}
            , {1, 1}
            , {0, -1}
            , {0, 0}
            , {0, 1}
            , {-1, -1}
            , {-1, 0}
            , {-1, 1}
        }
    };
};
